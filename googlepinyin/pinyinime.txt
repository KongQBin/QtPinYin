/*
 * Copyright (C) 2009 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef PINYINIME_INCLUDE_ANDPYIME_H__
#define PINYINIME_INCLUDE_ANDPYIME_H__

#include <stdlib.h>
#include "./dictdef.h"

#ifdef __cplusplus
extern "C" {
#endif

  namespace ime_pinyin {

  /**
   * Open the decoder engine via the system and user dictionary file names.
   *
   * @param fn_sys_dict The file name of the system dictionary.
   * @param fn_usr_dict The file name of the user dictionary.
   * @return true if open the decoder engine successfully.
   *
   * 通过系统和用户字典文件名打开解码器引擎。
   * @param fn_sys_dict系统字典的文件名。
   * @param fn_usr_dict用户字典的文件名。
   * 如果成功打开解码器引擎，@return true。
   */
  bool im_open_decoder(const char *fn_sys_dict, const char *fn_usr_dict);

  /**
   * Open the decoder engine via the system dictionary FD and user dictionary
   * file name. Because on Android, the system dictionary is embedded in the
   * whole application apk file.
   *
   * @param sys_fd The file in which the system dictionary is embedded.
   * @param start_offset The starting position of the system dictionary in the
   * file sys_fd.
   * @param length The length of the system dictionary in the file sys_fd,
   * counted in byte.
   * @return true if succeed.
   *
   * 通过系统字典FD和用户字典文件名打开解码器引擎。因为在Android上，系统字典被嵌入到整个应用程序apk文件中。
   * 内嵌系统字典的文件。
   * @param start_offset系统字典在sys_fd文件中的起始位置。
   * 系统字典在sys_fd文件中的长度，以字节为单位计算。
   * @return true如果成功
   */
  bool im_open_decoder_fd(int sys_fd, long start_offset, long length,
                          const char *fn_usr_dict);

  /**
   * Close the decoder engine.
   * 关闭解码器引擎。
   */
  void im_close_decoder();

  /**
   * Set maximum limitations for decoding. If this function is not called,
   * default values will be used. For example, due to screen size limitation,
   * the UI engine of the IME can only show a certain number of letters(input)
   * to decode, and a certain number of Chinese characters(output). If after
   * user adds a new letter, the input or the output string is longer than the
   * limitations, the engine will discard the recent letter.
   *
   * @param max_sps_len Maximum length of the spelling string(Pinyin string).
   * @max_hzs_len Maximum length of the decoded Chinese character string.
   *
   * 设置解码的最大限制。如果未调用此函数，将使用默认值。
   * 例如，由于屏幕尺寸的限制，IME的UI引擎只能显示一定数量的字母(输入)和一定数量的中文字符(输出)。
   * 如果用户添加新字母后，输入或输出字符串超过限制，引擎将丢弃最近的字母。
   *
   * 拼写字符串(拼音字符串)的最大长度。
   * @max_hzs_len解码中文字符串的最大长度。
   */
  void im_set_max_lens(size_t max_sps_len, size_t max_hzs_len);

  /**
   * Flush cached data to persistent memory. Because at runtime, in order to
   * achieve best performance, some data is only store in memory.
   * 将缓存的数据刷新到持久内存。因为在运行时，为了获得最佳性能，一些数据只存储在内存中。
   */
  void im_flush_cache();

  /**
   * Use a spelling string(Pinyin string) to search. The engine will try to do
   * an incremental search based on its previous search result, so if the new
   * string has the same prefix with the previous one stored in the decoder,
   * the decoder will only continue the search from the end of the prefix.
   * If the caller needs to do a brand new search, please call im_reset_search()
   * first. Calling im_search() is equivalent to calling im_add_letter() one by
   * one.
   *
   * @param sps_buf The spelling string buffer to decode.
   * @param sps_len The length of the spelling string buffer.
   * @return The number of candidates.
   *
   * 使用拼写字符串(拼音字符串)进行搜索。
   * 引擎将尝试根据之前的搜索结果进行增量搜索，
   * 因此如果新的字符串具有与解码器中存储的前一个字符串相同的前缀，
   * 解码器将只从前缀的末尾继续搜索。
   *
   * 如果调用者需要进行全新的搜索，
   * 请先调用im_reset_search()。
   * 调用im_search()等价于逐个调用im_add_letter()。
   *
   * @param sps_buf要解码的拼写字符串缓冲区。
   * @param sps_len拼写字符串缓冲区的长度。
   * @return 候选的数量。
   */
  size_t im_search(const char* sps_buf, size_t sps_len);

  /**
   * Make a delete operation in the current search result, and make research if
   * necessary.
   *
   * @param pos The posistion of char in spelling string to delete, or the
   * position of spelling id in result string to delete.
   * @param is_pos_in_splid Indicate whether the pos parameter is the position
   * in the spelling string, or the position in the result spelling id string.
   * @return The number of candidates.
   *
   * 在当前搜索结果中进行删除操作，并在必要时进行研究。
   * 字符在要删除的拼写字符串中的位置，或拼写id在要删除的结果字符串中的位置。
   * @param is_pos_in_splid表示pos参数是拼写字符串中的位置，还是结果拼写id字符串中的位置。
   * @返回候选的数量。
   */
  size_t im_delsearch(size_t pos, bool is_pos_in_splid,
                      bool clear_fixed_this_step);

  /**
   * Reset the previous search result.
   * 重置之前的搜索结果。
   */
  void im_reset_search();

  /**
   * Add a Pinyin letter to the current spelling string kept by decoder. If the
   * decoder fails in adding the letter, it will do nothing. im_get_sps_str()
   * can be used to get the spelling string kept by decoder currently.
   *
   * @param ch The letter to add.
   * @return The number of candidates.
   *
   * 在解码器保存的当前拼写字符串中添加一个拼音字母。
   * 如果解码器添加字母失败，它将什么也不做。
   * 可以使用im_get_sps_str()获取当前解码器保存的拼写字符串。
   *
   * @param ch 添加这字母。
   * @return 候选的数量。
   */
  size_t im_add_letter(char ch);

  /**
   * Get the spelling string kept by the decoder.
   *
   * @param decoded_len Used to return how many characters in the spelling
   * string is successfully parsed.
   * @return The spelling string kept by the decoder.
   *
   * 获取译码器保存的拼写字符串。
   * @param decoded_len用于返回拼写字符串中成功解析的字符数。
   * @return解码器保存的拼写字符串。
   */
  const char *im_get_sps_str(size_t *decoded_len);

  /**
   * Get a candidate(or choice) string.
   *
   * @param cand_id The id to get a candidate. Started from 0. Usually, id 0
   * is a sentence-level candidate.
   * @param cand_str The buffer to store the candidate.
   * @param max_len The maximum length of the buffer.
   * @return cand_str if succeeds, otherwise NULL.
   *
   * 获取一个候选(或选择)字符串。
   *
   * @param cand_id 获取候选人的id。从0开始。通常，id 0是句子级别的候选者。
   * @param cand_str 存储候选人的缓冲区。
   * @param max_len 缓冲区的最大长度。
   * @return cand_str 如果成功，否则为空。
   */
  char16* im_get_candidate(size_t cand_id, char16* cand_str,
                           size_t max_len);

  /**
   * Get the segmentation information(the starting positions) of the spelling
   * string.
   *
   * @param spl_start Used to return the starting posistions.
   * @return The number of spelling ids. If it is L, there will be L+1 valid
   * elements in spl_start, and spl_start[L] is the posistion after the end of
   * the last spelling id.
   *
   * 获取拼写字符串的分段信息(起始位置)。
   * @param spl_start用于返回起始位置。
   * @return 拼写id的数量。如果是L，
   * 在spl_start中将有L+1个有效元素，
   * spl_start[L]是最后一个拼写id结束后的位置。
   */
  size_t im_get_spl_start_pos(const uint16 *&spl_start);

  /**
   * Choose a candidate and make it fixed. If the candidate does not match
   * the end of all spelling ids, new candidates will be provided from the
   * first unfixed position. If the candidate matches the end of the all
   * spelling ids, there will be only one new candidates, or the whole fixed
   * sentence.
   *
   * @param cand_id The id of candidate to select and make it fixed.
   * @return The number of candidates. If after the selection, the whole result
   * string has been fixed, there will be only one candidate.
   *
   * 选择一个候选人，让它固定下来。
   * 如果候选人不匹配所有拼写id的结束，新的候选人将从第一个未固定的位置提供。
   * 如果candidate匹配所有拼写id的末尾，那么将只有一个新的candidate，或整个固定句子。
   * @param cand_id是要选择并修复的候选人的id。
   * @return 候选的数量。如果在选择之后，整个结果字符串已经固定，那么将只有一个候选字符串。
   */
  size_t im_choose(size_t cand_id);

  /**
   * Cancel the last selection, or revert the last operation of im_choose().
   *
   * @return The number of candidates.
   *
   * 取消最后一个选择，或恢复im_choose()的最后一个操作。
   * @返回候选的数量。
   */
  size_t im_cancel_last_choice();

  /**
   * Get the number of fixed spelling ids, or Chinese characters.
   *
   * @return The number of fixed spelling ids, of Chinese characters.
   *
   * 获取固定拼写id或汉字的数量。
   * @返回中文字符的固定拼写id的数量
   */
  size_t im_get_fixed_len();

  /**
   * Cancel the input state and reset the search workspace.
   * 取消输入状态并重置搜索工作区。
   */
  bool im_cancel_input();

  /**
   * Get prediction candiates based on the given fixed Chinese string as the
   * history.
   *
   * @param his_buf The history buffer to do the prediction. It should be ended
   * with '\0'.
   * @param pre_buf Used to return prediction result list.
   * @return The number of predicted result string.
   *
   * 根据给定的固定中文串作为历史，得到预测候选项。
   * @param his_buf历史缓冲做预测。它应该以'\0'结尾。
   * @param pre_buf用于返回预测结果列表。
   * @返回预测结果字符串的数量。
   */
  size_t im_get_predicts(const char16 *his_buf,
                         char16 (*&pre_buf)[kMaxPredictSize + 1]);

  /**
   * Enable Shengmus in ShouZiMu mode.
   * 在首字母模式下启用声母。
   */
  void im_enable_shm_as_szm(bool enable);

  /**
   * Enable Yunmus in ShouZiMu mode.
   * 在首字母模式下启用韵母。
   */
  void im_enable_ym_as_szm(bool enable);
}

#ifdef __cplusplus
}
#endif

#endif  // PINYINIME_INCLUDE_ANDPYIME_H__
